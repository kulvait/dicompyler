Author: VojtÄ›ch Kulvait <kulvait@gmail.com>
Last-Update: Mon Sep 18 23:15:00 CEST 2017
Bug-Debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=854837
Description: wxmpl file was outdated, so it was updated to github.com/NOAA-ORR-ERD/wxmpl version "2.1.0dev1" including patch matplotlib.1069221.n5.nabble.com/wxMPL-patch-td34955.html

Index: dicompyler/dicompyler/wxmpl.py
===================================================================
--- dicompyler.orig/dicompyler/wxmpl.py
+++ dicompyler/dicompyler/wxmpl.py
@@ -1,6 +1,5 @@
 # Purpose: painless matplotlib embedding for wxPython
 # Author: Ken McIvor <mcivor@iit.edu>
-# Portions modified by Aditya Panchal
 #
 # Copyright 2005-2009 Illinois Institute of Technology
 #
@@ -16,20 +15,23 @@ missing features in the form of a better
 
 
 import wx
+import sys
 import os.path
 import weakref
 
 import matplotlib
 matplotlib.use('WXAgg')
-import numpy as np
-from matplotlib.axes import _process_plot_var_args
-from matplotlib.backends.backend_agg import RendererAgg
+import numpy as NumPy
+from matplotlib.axes._base import _process_plot_var_args
+from matplotlib.backend_bases import FigureCanvasBase
+from matplotlib.backends.backend_agg import FigureCanvasAgg, RendererAgg
 from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg
 from matplotlib.figure import Figure
 from matplotlib.font_manager import FontProperties
+from matplotlib.projections.polar import PolarAxes
 from matplotlib.transforms import Bbox
 
-__version__ = '1.3.1'
+__version__ = '2.1.0dev1'
 
 __all__ = ['PlotPanel', 'PlotFrame', 'PlotApp', 'StripCharter', 'Channel',
     'FigurePrinter', 'PointEvent', 'EVT_POINT', 'SelectionEvent',
@@ -1122,7 +1124,8 @@ class PlotPanel(FigureCanvasWxAgg):
         # find the toplevel parent window and register an activation event
         # handler that is keyed to the id of this PlotPanel
         topwin = toplevel_parent_of_window(self)
-        topwin.Connect(-1, self.GetId(), wx.wxEVT_ACTIVATE, self.OnActivate)
+        #Patch of wxMPL to make it work with wxPython 2.9 due to http://matplotlib.1069221.n5.nabble.com/wxMPL-patch-td34955.html
+        topwin.Connect(self.GetId(), wx.ID_ANY, wx.wxEVT_ACTIVATE, self.OnActivate)
 
         wx.EVT_ERASE_BACKGROUND(self, self.OnEraseBackground)
         wx.EVT_WINDOW_DESTROY(self, self.OnDestroy)
@@ -1131,8 +1134,6 @@ class PlotPanel(FigureCanvasWxAgg):
         """
         Handles the wxPython window activation event.
         """
-        if not isinstance(self, FigureCanvasWxAgg):
-            return
         if not evt.GetActive():
             self.cursor.setNormal()
             self.location.clear()
@@ -1422,7 +1423,7 @@ class PlotFrame(wx.Frame):
         fileName = wx.FileSelector('Save Plot', default_extension='png',
             wildcard=('Portable Network Graphics (*.png)|*.png|'
                 + 'Encapsulated Postscript (*.eps)|*.eps|All files (*.*)|*.*'),
-            parent=self, flags=wx.FD_SAVE|wx.FD_OVERWRITE_PROMPT)
+            parent=self, flags=wx.SAVE|wx.OVERWRITE_PROMPT)
 
         if not fileName:
             return
@@ -1649,7 +1650,7 @@ class VectorBuffer:
     accomodate new entries.
     """
     def __init__(self):
-        self.data = np.zeros((16,), np.Float)
+        self.data = NumPy.zeros((16,), dtype=float)
         self.nextRow = 0
 
     def clear(self):
@@ -1663,7 +1664,7 @@ class VectorBuffer:
         """
         Zero and reset this buffer, releasing the underlying array.
         """
-        self.data = np.zeros((16,), np.Float)
+        self.data = NumPy.zeros((16,), dtype=float)
         self.nextRow = 0
 
     def append(self, point):
@@ -1675,11 +1676,11 @@ class VectorBuffer:
 
         resize = False
         if nextRow == data.shape[0]:
-            nR = int(np.ceil(self.data.shape[0]*1.5))
+            nR = int(NumPy.ceil(self.data.shape[0]*1.5))
             resize = True
 
         if resize:
-            self.data = np.zeros((nR,), np.Float)
+            self.data = NumPy.zeros((nR,), dtype=float)
             self.data[0:data.shape[0]] = data
 
         self.data[nextRow] = point
@@ -1701,7 +1702,7 @@ class MatrixBuffer:
     accomodate new rows of entries.
     """
     def __init__(self):
-        self.data = np.zeros((16, 1), np.Float)
+        self.data = NumPy.zeros((16, 1), dtype=float)
         self.nextRow = 0
 
     def clear(self):
@@ -1715,14 +1716,14 @@ class MatrixBuffer:
         """
         Zero and reset this buffer, releasing the underlying array.
         """
-        self.data = np.zeros((16, 1), np.Float)
+        self.data = NumPy.zeros((16, 1), dtype=float)
         self.nextRow = 0
 
     def append(self, row):
         """
         Append a new row of entries to the end of this buffer's matrix.
         """
-        row = np.asarray(row, np.Float)
+        row = NumPy.asarray(row, dtype=float)
         nextRow = self.nextRow
         data = self.data
         nPts = row.shape[0]
@@ -1733,7 +1734,7 @@ class MatrixBuffer:
         resize = True
         if nextRow == data.shape[0]:
             nC = data.shape[1]
-            nR = int(np.ceil(self.data.shape[0]*1.5))
+            nR = int(NumPy.ceil(self.data.shape[0]*1.5))
             if nC < nPts:
                 nC = nPts
         elif data.shape[1] < nPts:
@@ -1743,7 +1744,7 @@ class MatrixBuffer:
             resize = False
 
         if resize:
-            self.data = np.zeros((nR, nC), np.Float)
+            self.data = NumPy.zeros((nR, nC), dtype=float)
             rowEnd, colEnd = data.shape
             self.data[0:rowEnd, 0:colEnd] = data
 
@@ -1935,7 +1936,7 @@ class StripCharter:
                 xys = axes._get_verts_in_data_coords(
                     line.get_transform(), zip(x, y))
             else:
-                xys = np.zeros((x.shape[0], 2), np.Float)
+                xys = NumPy.zeros((x.shape[0], 2), dtype=float)
                 xys[:,0] = x
                 xys[:,1] = y
             axes.update_datalim(xys)
